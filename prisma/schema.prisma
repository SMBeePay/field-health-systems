// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User Management
enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  USER
  DEMO
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  password      String
  role          UserRole   @default(USER)
  status        UserStatus @default(PENDING)
  emailVerified DateTime?
  image         String?
  phone         String?
  title         String?
  
  // Organization relationship
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  // Auth relationships
  accounts Account[]
  sessions Session[]
  
  // Activity relationships
  createdFields      Field[]           @relation("FieldCreatedBy")
  updatedFields      Field[]           @relation("FieldUpdatedBy")
  testingData        TestingData[]
  auditLogs          AuditLog[]
  passwordResetTokens PasswordResetToken[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

// Organization Management
enum OrganizationType {
  K12_SCHOOL
  COLLEGE_UNIVERSITY
  MUNICIPAL
  PRIVATE_FACILITY
  DEMO
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  TRIAL
  SUSPENDED
}

model Organization {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  type        OrganizationType
  status      OrganizationStatus @default(ACTIVE)
  
  // Contact Information
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phone       String?
  website     String?
  
  // Subscription Information
  subscriptionTier    String?    @default("basic")
  subscriptionStatus  String?    @default("active")
  subscriptionExpires DateTime?
  
  // Relationships
  users               User[]
  fields              Field[]
  maintenanceRecommendations MaintenanceRecommendation[]
  complianceReports   ComplianceReport[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

// Field Management
enum FieldType {
  FOOTBALL
  SOCCER
  BASEBALL
  LACROSSE
  MULTI_PURPOSE
  TRACK
}

enum FieldStatus {
  EXCELLENT
  GOOD
  MONITOR
  CRITICAL
  OUT_OF_SERVICE
}

model Field {
  id               String      @id @default(cuid())
  name             String
  type             FieldType
  status           FieldStatus @default(GOOD)
  
  // Organization relationship
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Field Details
  installDate      DateTime?
  manufacturer     String?
  surface          String?
  infillType       String?
  totalArea        Float?
  lastTestingDate  DateTime?
  
  // Location Data
  latitude         Float?
  longitude        Float?
  satelliteImageUrl String?
  
  // Field Dimensions
  length           Float?
  width            Float?
  orientation      Float? // degrees from north
  
  // Relationships
  testingData      TestingData[]
  maintenanceRecommendations MaintenanceRecommendation[]
  complianceReports ComplianceReport[]
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  createdByUser    User? @relation("FieldCreatedBy", fields: [createdBy], references: [id])
  updatedByUser    User? @relation("FieldUpdatedBy", fields: [updatedBy], references: [id])
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("fields")
}

// Testing Management
enum TestingStatus {
  PASSED
  MONITOR
  FAILED
  CRITICAL
}

model TestingData {
  id                 String        @id @default(cuid())
  
  // Field relationship
  fieldId            String
  field              Field         @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  // Testing Information
  testingDate        DateTime
  testingTechnician  String
  weatherConditions  String?
  temperature        Float?
  
  // Test Results
  gmaxReadings       Json?         // Store as JSON array
  gmaxAverage        Float
  gmaxStatus         TestingStatus @default(PASSED)
  
  shearReadings      Json?         // Store as JSON array
  shearAverage       Float
  shearStatus        TestingStatus @default(PASSED)
  
  infillDepthReadings Json?        // Store as JSON array
  infillDepthAverage  Float
  infillDepthStatus   TestingStatus @default(PASSED)
  
  overallStatus      TestingStatus @default(PASSED)
  
  // Additional Information
  notes              String?
  photos             Json?         // Store as JSON array
  
  // Testing Locations
  testingLocations   Json?         // Store testing location data as JSON
  
  // Audit
  conductedBy        String?
  conductedByUser    User?         @relation(fields: [conductedBy], references: [id])
  
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("testing_data")
}

// Maintenance Management
enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

model MaintenanceRecommendation {
  id             String              @id @default(cuid())
  
  // Relationships
  fieldId        String
  field          Field               @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Recommendation Details
  title          String
  description    String
  priority       MaintenancePriority
  status         MaintenanceStatus   @default(OPEN)
  category       String              // e.g., "Infill", "Surface Repair", "General Maintenance"
  
  // Cost and Timeline
  estimatedCost  Float?
  estimatedHours Float?
  dueDate        DateTime?
  completedDate  DateTime?
  
  // Additional Information
  notes          String?
  attachments    Json?               // Store as JSON array
  
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@map("maintenance_recommendations")
}

// Compliance Management
enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PENDING_REVIEW
  EXPIRED
}

model ComplianceReport {
  id             String           @id @default(cuid())
  
  // Relationships
  fieldId        String
  field          Field            @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Report Details
  reportType     String           // e.g., "ASTM F1936", "FIFA Quality", "Safety Inspection"
  status         ComplianceStatus
  issuedDate     DateTime
  expirationDate DateTime?
  
  // Content
  summary        String?
  findings       Json?            // Store structured findings
  recommendations String?
  
  // Files
  reportDocument String?          // URL to PDF report
  attachments    Json?            // Store as JSON array
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("compliance_reports")
}

// Audit Logging
enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_RESET
  EMAIL_CHANGE
  ROLE_CHANGE
  EXPORT
  IMPORT
}

model AuditLog {
  id         String      @id @default(cuid())
  
  // User and Organization
  userId     String?
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Action Details
  action     AuditAction
  resource   String      // e.g., "User", "Field", "TestingData"
  resourceId String?     // ID of the affected resource
  
  // Request Information
  ipAddress  String?
  userAgent  String?
  
  // Change Details
  oldValues  Json?       // Previous state (for updates)
  newValues  Json?       // New state (for creates/updates)
  
  // Additional Context
  metadata   Json?       // Additional context about the action
  
  createdAt  DateTime    @default(now())

  @@map("audit_logs")
}

// Email and Notification Management
enum NotificationType {
  TESTING_REMINDER
  MAINTENANCE_DUE
  COMPLIANCE_EXPIRING
  CRITICAL_READING
  SYSTEM_ALERT
  PASSWORD_RESET
  WELCOME
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  OPENED
  CLICKED
}

model NotificationLog {
  id           String             @id @default(cuid())
  
  // Recipients
  email        String
  userId       String?
  
  // Content
  type         NotificationType
  subject      String
  content      String
  
  // Status
  status       NotificationStatus @default(PENDING)
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  
  // Metadata
  metadata     Json?
  
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("notification_logs")
}